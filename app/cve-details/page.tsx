'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { AlertTriangle, Search, RefreshCw, Shield, AlertCircle, CheckCircle } from "lucide-react"
import { Separator } from "@/components/ui/separator"

interface CVEDetails {
  id: string;
  description: string;
  publishedDate: string;
  lastModifiedDate: string;
  cvssScore: number;
  severity: string;
  status: string;
  affectedSystems: string[];
  references: string[];
  patches: string[];
  exploitStatus: string;
}

export default function CVEDetails() {
  const [mounted, setMounted] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [cveList, setCVEList] = useState<CVEDetails[]>([]);
  const [selectedCVE, setSelectedCVE] = useState<CVEDetails | null>(null);

  useEffect(() => {
    setMounted(true);
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setIsLoading(true);
      setError(null);
      console.log('Fetching CVE data...');
      
      const response = await fetch("/api/cve-details", {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        cache: 'no-store'
      });
      
      console.log('Response status:', response.status);
      console.log('Response headers:', {
        'content-type': response.headers.get('content-type'),
        'content-length': response.headers.get('content-length')
      });
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        console.error('API Error Response:', {
          status: response.status,
          statusText: response.statusText,
          error: errorData
        });
        throw new Error(`HTTP error! status: ${response.status} - ${errorData.error || response.statusText}`);
      }
      
      const data = await response.json();
      console.log('Received CVE data:', data);
      
      if (!data.cveList) {
        throw new Error('Invalid response format: missing cveList');
      }
      
      setCVEList(data.cveList);
      setIsLoading(false);
    } catch (error) {
      console.error('Error loading CVE data:', error);
      setError(error instanceof Error ? error.message : 'Failed to load CVE data');
      setIsLoading(false);
    }
  };

  if (!mounted) {
    return null;
  }

  const filteredCVEs = cveList.filter(cve => 
    searchQuery === '' || 
    cve.id.toLowerCase().includes(searchQuery.toLowerCase()) ||
    cve.description.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="h-full w-full flex flex-col bg-background">
      <div className="w-full flex h-16 items-center justify-between border-b border-border px-4">
        <h1 className="text-lg font-semibold text-white">CVE Details</h1>
      </div>

      <div className="flex-1 p-4 space-y-6 overflow-hidden bg-background">
        <div className="flex items-center gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-white/70" />
            <Input
              type="search"
              placeholder="Search CVE ID or description..."
              className="pl-8 w-full bg-transparent border-border text-white"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <Button 
            variant="outline"
            size="sm"
            className="shrink-0 text-white border-white/20 hover:bg-white/10"
            onClick={loadData}
            disabled={isLoading}
          >
            <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
            {isLoading ? 'Refreshing...' : 'Refresh'}
          </Button>
        </div>

        <div className="grid gap-4 grid-cols-12 h-[calc(100vh-180px)]">
          {/* CVE List */}
          <Card className="col-span-4 bg-card border-border overflow-hidden">
            <CardHeader>
              <CardTitle className="text-white">CVE List</CardTitle>
              <CardDescription className="text-white/70">Select a CVE to view details</CardDescription>
            </CardHeader>
            <CardContent className="p-0">
              {error ? (
                <div className="p-4 text-center text-red-500">Error: {error}</div>
              ) : isLoading ? (
                <div className="flex items-center justify-center p-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
                </div>
              ) : filteredCVEs.length > 0 ? (
                <div className="divide-y divide-border overflow-y-auto h-[calc(100vh-300px)]">
                  {filteredCVEs.map((cve) => (
                    <button
                      key={cve.id}
                      onClick={() => setSelectedCVE(cve)}
                      className={`w-full p-4 text-left hover:bg-white/5 transition-colors ${
                        selectedCVE?.id === cve.id ? 'bg-white/10' : ''
                      }`}
                    >
                      <div className="flex items-start justify-between gap-4">
                        <div>
                          <div className="font-medium text-white">{cve.id}</div>
                          <div className="text-sm text-white/70 line-clamp-2">{cve.description}</div>
                        </div>
                        <div className={`px-2 py-1 rounded text-xs font-medium ${
                          cve.severity === 'Critical' ? 'bg-red-500/20 text-red-500' :
                          cve.severity === 'High' ? 'bg-orange-500/20 text-orange-500' :
                          cve.severity === 'Medium' ? 'bg-yellow-500/20 text-yellow-500' :
                          'bg-blue-500/20 text-blue-500'
                        }`}>
                          {cve.severity}
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
              ) : (
                <div className="text-center p-8 text-white/70">
                  {searchQuery ? "No CVEs found matching your search." : "No CVEs available."}
                </div>
              )}
            </CardContent>
          </Card>

          {/* CVE Details */}
          <Card className="col-span-8 bg-card border-border">
            {selectedCVE ? (
              <>
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div>
                      <CardTitle className="text-white text-xl">{selectedCVE.id}</CardTitle>
                      <CardDescription className="text-white/70 mt-1">
                        Published: {new Date(selectedCVE.publishedDate).toLocaleDateString()}
                        {" Â· "}
                        Last Modified: {new Date(selectedCVE.lastModifiedDate).toLocaleDateString()}
                      </CardDescription>
                    </div>
                    <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                      selectedCVE.severity === 'Critical' ? 'bg-red-500/20 text-red-500' :
                      selectedCVE.severity === 'High' ? 'bg-orange-500/20 text-orange-500' :
                      selectedCVE.severity === 'Medium' ? 'bg-yellow-500/20 text-yellow-500' :
                      'bg-blue-500/20 text-blue-500'
                    }`}>
                      {selectedCVE.severity} (CVSS: {selectedCVE.cvssScore})
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div>
                    <h3 className="text-sm font-medium text-white mb-2">Description</h3>
                    <p className="text-white/70">{selectedCVE.description}</p>
                  </div>

                  <Separator className="bg-border" />

                  <div>
                    <h3 className="text-sm font-medium text-white mb-2">Affected Systems</h3>
                    <div className="grid grid-cols-2 gap-2">
                      {selectedCVE.affectedSystems.map((system, index) => (
                        <div key={index} className="text-white/70 bg-white/5 px-3 py-2 rounded">
                          {system}
                        </div>
                      ))}
                    </div>
                  </div>

                  <Separator className="bg-border" />

                  <div>
                    <h3 className="text-sm font-medium text-white mb-2">Status & Exploit</h3>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="bg-white/5 p-4 rounded">
                        <div className="text-sm text-white/70 mb-1">Status</div>
                        <div className="text-white font-medium">{selectedCVE.status}</div>
                      </div>
                      <div className="bg-white/5 p-4 rounded">
                        <div className="text-sm text-white/70 mb-1">Exploit Status</div>
                        <div className="text-white font-medium">{selectedCVE.exploitStatus}</div>
                      </div>
                    </div>
                  </div>

                  <Separator className="bg-border" />

                  <div>
                    <h3 className="text-sm font-medium text-white mb-2">References</h3>
                    <div className="space-y-2">
                      {selectedCVE.references.map((ref, index) => (
                        <a
                          key={index}
                          href={ref}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="block text-blue-400 hover:text-blue-300 truncate"
                        >
                          {ref}
                        </a>
                      ))}
                    </div>
                  </div>

                  {selectedCVE.patches.length > 0 && (
                    <>
                      <Separator className="bg-border" />
                      <div>
                        <h3 className="text-sm font-medium text-white mb-2">Available Patches</h3>
                        <div className="space-y-2">
                          {selectedCVE.patches.map((patch, index) => (
                            <div key={index} className="flex items-center gap-2 text-white/70">
                              <CheckCircle className="h-4 w-4 text-green-500" />
                              {patch}
                            </div>
                          ))}
                        </div>
                      </div>
                    </>
                  )}
                </CardContent>
              </>
            ) : (
              <div className="flex flex-col items-center justify-center h-full text-white/70">
                <Shield className="h-12 w-12 mb-4 text-white/20" />
                <p>Select a CVE to view its details</p>
              </div>
            )}
          </Card>
        </div>
      </div>
    </div>
  );
}
